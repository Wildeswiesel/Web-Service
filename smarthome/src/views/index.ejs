<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <title>SmartHome - Übersicht</title>
  <link rel="stylesheet" href="/css/index.css" />
</head>
<body>
  <%- include('partials/header') %>
  
  <h1>SmartHome-Dashboard</h1>
  
  <section class="table-container-room">
    <h2>Vorhandene Räume</h2>
    <div class="table-scroll-room">
      <table id="rooms">
        <thead>
          <tr>
            <th>Raum ID</th>
            <th>Raumtemperatur</th>
            <th>Reduzierte Temperatur</th>
            <th>Aktuelle Temperatur</th>
          </tr>
        </thead>
        <tbody>
          <% rooms.forEach(room => { %>
            <tr data-room-id="<%= room.roomid %>">
              <td><%= room.roomid %></td>
              <td><%= room.room_temperature %>°C</td>
              <td><%= room.reduced_temperature %>°C</td>
              <td>
                <span id="currentTemperature_<%= room.roomid %>">
                  <%= Number(room.current_temperature).toFixed(2) %>
                </span>°C
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </section>
  <section class="table-container-device">
    <h2>Vorhandene Geräte</h2>
    <div class="table-scroll-device">
    <table id="devices">
      <thead>
        <tr>
          <th>Device ID</th>
          <th>Typ</th>
          <th>Raum</th>
          <th>Aktion</th>
          <th>Löschen</th>
        </tr>
      </thead>
      <tbody>
        <% devices.forEach(device => { %>
          <tr data-device-id="<%= device.deviceid %>" class="<%= device.type === 'thermostat' ? 'thermostat-row' : '' %>">
            <td><%= device.deviceid %></td>
            <td><%= device.type %></td>
            <td><%= device.roomid || '—' %></td>
            <td>
              <% if (device.type === 'thermostat') { %>
                  <!-- Anzeige: heatingMode wird per Polling aktualisiert -->
                  <span class="heating-mode">Stufe: –</span><!--  -- verändert zu der Stufe des Thermostats (0,1,2,3,4,5) -->
              <% } else if (device.type === 'fensterkontakt') { %>
                <button id="open" onclick="setOpen('<%= device.deviceid %>', 'open')">▲</button>
                <button id="close" onclick="setClosed('<%= device.deviceid %>', 'closed')">▼</button>
              <% } else { %>
                –
              <% } %>
            </td>
            <td>
              <!-- Lösch-Button hinzufügen -->
              <button id="löschen" onclick="deleteDevice('<%= device.id %>')">&#x1F5D1;</button>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
  </section>

  <script>
    async function deleteDevice(deviceId) {
      if (!confirm("Willst du dieses Gerät wirklich löschen?")) return;
      try {
        const response = await fetch(`/devices/${deviceId}`, { method: 'DELETE' });
        if (response.ok) {
          alert("Gerät erfolgreich gelöscht!");
          location.reload(); // Seite neu laden, um das entfernte Gerät nicht mehr anzuzeigen
        } else {
          const errorText = await response.text();
          alert("Fehler beim Löschen: " + errorText);
        }
      } catch (error) {
        console.error("Fehler beim Löschen des Geräts:", error);
        alert("Es gab ein Problem beim Löschen des Geräts.");
      }
    }

    // Diese Funktion holt den Status jedes Thermostats und aktualisiert den angezeigten heatingMode
    async function updateThermostatStatuses() {
      const rows = document.querySelectorAll('tr.thermostat-row');
      for (const row of rows) {
        const deviceId = row.getAttribute('data-device-id');
        try {
          const res = await fetch(`/thermostats/${deviceId}/status`);
          if (res.ok) {
            const data = await res.json();
            if (row.querySelector('.heating-mode')) {
              row.querySelector('.heating-mode').textContent = 'Stufe: ' + data.heatingMode;
            }
          }
        } catch (err) {
          console.error(`Fehler beim Aktualisieren des Status für Gerät ${deviceId}:`, err);
        }
      }
    }

    updateThermostatStatuses();
    setInterval(updateThermostatStatuses, 3000);

    async function fetchRoomStatus(roomId) {
      try {
        const res = await fetch(`/room/${roomId}/status`);
        if (res.ok) {
          return await res.json();
        } else {
          console.error(`Fehler beim Abrufen der Raumwerte für Raum ${roomId}`);
        }
      } catch (err) {
        console.error(`Fehler beim Abrufen der Raumwerte für Raum ${roomId}:`, err);
      }
      return null;
    }

    async function updateRoomTemperatures() {
      const rows = document.querySelectorAll('tr[data-room-id]');
      for (const row of rows) {
        const roomId = row.getAttribute('data-room-id');
        const status = await fetchRoomStatus(roomId);
        if (status) {
          const tempElement = document.getElementById(`currentTemperature_${roomId}`);
          if (tempElement) {
            tempElement.textContent = Number(status.current_temperature).toFixed(2);
          }
        }
      }
    }
    
    updateRoomTemperatures();
    setInterval(updateRoomTemperatures, 3000);
  </script>
  <script src="/js/fensterkontakt.js"></script>
</body>
</html>
